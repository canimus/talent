<body>
<div id="chart" class="block">
  <h2><%= @curriculum.candidate %></h2>
</div>
<div id="stats" class="block">
  <h2>Test DNA</h2>
</div>
<script src="/assets/d3.min.js"></script>
<script>

  var top_words = 100;
  var data = null;

  var diameter = 660,
      format = d3.format(",d"),
      color = d3.scale.category20c();

  var bubble = d3.layout.pack()
      .sort(null)
      .size([diameter, diameter])
      .padding(10);

  var svg = d3.select("#chart").append("svg")
      .attr("width", diameter)
      .attr("height", diameter)
      .attr("class", "bubble")
      .style("position", "relative")
      .style("top", "-10px");

  // Bubble Graph: START
  // =============================
  d3.json("/words/<%=@curriculum.id%>.json", function(error, root) {


    values = []
    d3.map(root).entries().map(function(o) {
      values.push({name: o.key, size: +o.value})
    });
    // The slice method selects the number of words to show
    root = {name: "words", children: values.sort(function(a,b) { return a.size<b.size}).slice(0,top_words) }
    data = root;

    top_10();

    var node = svg.selectAll(".node")
        .data(bubble.nodes(classes(root))
        .filter(function(d) { return !d.children; }))
      .enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

    node.append("title")
        .text(function(d) { return d.className + ": " + format(d.value); });

    node.append("circle")
        .attr("r", function(d) { return 0; })
        .style("fill", function(d) { return color(d.packageName); })
        .style("fill", "#96bfdd")
        .transition()
        .ease("elastic")
        .duration(2000)
        .attr("r", function(d) { return d.r });

    node.append("text")
        .attr("dy", ".3em")
        .style("text-anchor", "middle")
        .text(function(d) { return d.className.substring(0, d.r / 3); });
  });

  // Bubble Graph: END
  // =============================

  // Analysis Languages
  // languages = ["java", "c", "ansi", "c++", "python", "ruby", "c-sharp", "vbscript", "javascript"]
  // dna = ["test", "testing", "team", "automation", "sql", "performance", "quality"]
  // automation = ["language", "languages", "script", "scripts", "scripting","regression", "unattended", "selenium", "qtp", "webdriver", "uft", "silktest", "rational"]
  // platforms = ["microsoft", "oracle", "ibm", "hp", "j2ee", "mvc", "erp", "crm"]
  // test_management = ["qc", "alm", "cases", "plan", "planning", "lab", "execution", "report", "reports", "reports"]

  // Returns a flattened hierarchy containing all leaf nodes under the root.
  function classes(root) {
    var classes = [];

    function recurse(name, node) {
      if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
      else classes.push({packageName: name, className: node.name, value: node.size});
    }

    recurse(null, root);
    return {children: classes};
  }

  function check_dna(word) {
    return data.children.map(function(d){return d.name}).indexOf(word) > 0
  }

  function top_10() {
    var list = d3.select("#stats").append("ol");
    list.selectAll("li").data(data.children.map(function(d){return d.name}).slice(0,10))
      .enter().append("li").text(function(d) {return d});
  }

  d3.select(self.frameElement).style("height", diameter + "px");

</script>


<section style="clear:both">
<%= link_to 'Edit', edit_curriculum_path(@curriculum) %> |
<%= link_to 'Back', curriculums_path %>
</section>
</body>
