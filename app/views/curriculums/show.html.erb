<body>
<div id="chart" class="block">
  <h2>
    <%= @curriculum.candidate %><br/>
    <span><%= @curriculum.role %></span>
  </h2>
</div>
<div id="stats" class="block">
  <h2>DNA</h2>
</div>
<script>

  var top_words = 100;
  var data = null;

  var diameter = 660,
      format = d3.format(",d");

  // D3 Layout
  var pack = d3.pack()
      .size([diameter, diameter])
      .padding(5);

  // Encloing Element for the Visualization
  var svg = d3.select("#chart").append("svg")
      .attr("width", diameter)
      .attr("height", diameter);

  var v_acc = function(d) {return d.value};
  var k_acc = function(d) {return d.data.key};
  var s_asc = function(a,b) {return d3.ascending(a.value, b.value); };
  var s_des = function(a,b) {return d3.descending(a.value, b.value); };

  // Bubble Graph: START
  // =============================
  d3.json("/words/<%=@curriculum.id%>.json", function(error, root) {

    data = d3.hierarchy({children: d3.map(root).entries().sort(s_des).slice(0,top_words) }).sum(v_acc).sort(s_asc);
    pack(data);
    var color = d3.scaleLinear().domain(d3.extent(data.descendants().slice(1).map(v_acc))).range([0,1]);
    top10();

    var node = svg.selectAll(".node")
        .data(data.descendants().slice(1))
        .enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

    node.append("title")
        .text(function(d) { return d.data.key + ": " + format(d.value); });

    // Transition when loading page
    // produces bubbles to elastically
    // increment their radious size
    var t = d3.transition()
        .duration(2000)
        .ease(d3.easeElastic);

    node.append("circle")
        .attr("r", function(d) { return 0; })
        .style("fill", function(d) { return d3.interpolateCool(color(d.value)); })
        .transition(t)
        .attr("r", function(d) { return d.r });

    node.append("text")
        .attr("dy", ".3em")
        .style("text-anchor", "middle")
        .style("fill", function(d,i){ return color(d.value) > 0.4 ? "black" : "white"})
        .text(function(d) { return d.data.key.substring(0, d.r / 4); });
  });

  // Bubble Graph: END
  // =============================

  // Analysis Languages
  // languages = ["java", "c", "ansi", "c++", "python", "ruby", "c-sharp", "vbscript", "javascript"]
  // dna = ["test", "testing", "team", "automation", "sql", "performance", "quality"]
  // automation = ["language", "languages", "script", "scripts", "scripting","regression", "unattended", "selenium", "qtp", "webdriver", "uft", "silktest", "rational"]
  // platforms = ["microsoft", "oracle", "ibm", "hp", "j2ee", "mvc", "erp", "crm"]
  // test_management = ["qc", "alm", "cases", "plan", "planning", "lab", "execution", "report", "reports", "reports"]

  function check_dna(word) {
    return data.children.map(function(d){return d.name}).indexOf(word) > 0
  }

  function top10() {
    var list = d3.select("#stats").append("ol");
    var filter = data.children.map(k_acc).reverse().slice(0,10);
    list.selectAll("li").data(filter)
      .enter().append("li").text(function(d) {return d});
  }

  d3.select(self.frameElement).style("height", diameter + "px");

</script>


<section style="clear:both">
<%= link_to 'Edit', edit_curriculum_path(@curriculum) %> |
<%= link_to 'Back', curriculums_path %>
</section>
</body>
